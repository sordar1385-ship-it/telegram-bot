import asyncio
from telethon import TelegramClient, events
from telethon.tl.functions.messages import GetHistoryRequest

# =======================
# ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ API ID & HASH
# =======================
api_id = ---------
api_hash = "----------"

# =======================
# ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶°‡ßá‡¶∏‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø
# =======================
SOURCE_GROUP_ID = -------   # ‡¶∏‡ßã‡¶∞‡ßç‡¶∏ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™
DEST_GROUP_ID   =-------   # ‡¶°‡ßá‡¶∏‡ßç‡¶ü‡¶ø‡¶®‡ßá‡¶∂‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™

# =======================
# TelegramClient ‡¶§‡ßà‡¶∞‡¶ø
# =======================
client = TelegramClient("session", api_id, api_hash)

# =======================
# ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
# =======================
async def forward_old_videos(source, dest, batch_limit=100):
    print("‚è≥ ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡ßã ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá...")
    offset_id = 0
    total_count = 0

    while True:
        history = await client(GetHistoryRequest(
            peer=source,
            limit=batch_limit,
            offset_id=offset_id,
            offset_date=None,
            max_id=0,
            min_id=0,
            add_offset=0,
            hash=0
        ))

        messages = history.messages
        if not messages:
            break

        for msg in messages:
            if msg.video:
                await client.forward_messages(dest, msg)
                total_count += 1
                await asyncio.sleep(1)  # ‡¶õ‡ßã‡¶ü delay, rate-limit ‡¶è‡ßú‡¶æ‡¶§‡ßá

        offset_id = messages[-1].id

    print(f"‚úÖ ‡¶∏‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶Æ‡ßã‡¶ü: {total_count}")

# =======================
# ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
# =======================
@client.on(events.NewMessage(chats=SOURCE_GROUP_ID))
async def new_video_handler(event):
    if event.message.video:
        await client.forward_messages(DEST_GROUP_ID, event.message)
        print("üìπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")

# =======================
# ‡¶Æ‡ßá‡¶á‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
# =======================
async def main():
    source = await client.get_entity(SOURCE_GROUP_ID)
    dest   = await client.get_entity(DEST_GROUP_ID)

    # ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶°
    await forward_old_videos(source, dest)

    print("ü§ñ ‡¶¨‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶Ü‡¶õ‡ßá, ‡¶®‡¶§‡ßÅ‡¶® ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ö‡¶ü‡ßã ‡¶´‡¶∞‡ßã‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶π‡¶¨‡ßá...")
    await client.run_until_disconnected()

# =======================
# ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶∞‡¶æ‡¶®
# =======================
with client:
    client.loop.run_until_complete(main())

